// This file is automatically generated. Do not edit it directly.
import { createClient, SupabaseClient } from '@supabase/supabase-js';
import { Database } from '@/types/database';
import { handleApiError, ApiError } from '@/utils/errorHandling';

// Initialize Supabase client
const initSupabase = () => {
  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseAnonKey) {
    throw new ApiError('Missing Supabase environment variables. Please check your .env file.');
  }

  return createClient<Database>(supabaseUrl, supabaseAnonKey);
};

// Create and export the Supabase client
export const supabase = initSupabase();

// Export the typed client type
export type TypedSupabaseClient = SupabaseClient<Database>;

// Set up the rewrite for the webhook endpoint
if (typeof window !== "undefined") {
  // Only run in browser environment
  const { pathname } = window.location;
  if (pathname.startsWith("/api/webhook/")) {
    // This will be handled by the edge function
    const token = pathname.split("/").pop() || '';
    window.history.replaceState(
      {},
      document.title,
      `/settings?tab=webhooks`
    );
  }
}

// Create a type-safe Supabase client
export const createTypedSupabaseClient = (): TypedSupabaseClient => {
  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
  const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
  if (!supabaseUrl || !supabaseAnonKey) {
    throw new ApiError('Missing Supabase configuration');
  }

  return createClient<Database>(supabaseUrl, supabaseAnonKey);
};

// Create a wrapped Supabase client with error handling
export const createWrappedSupabaseClient = () => {
  const client = createTypedSupabaseClient();

  return {
    // Auth methods
    signIn: async (email: string, password: string) => {
      try {
        const { data, error } = await client.auth.signInWithPassword({
          email,
          password,
        });
        if (error) throw error;
        return data;
      } catch (error) {
        throw handleApiError(error);
      }
    },

    signOut: async () => {
      try {
        const { error } = await client.auth.signOut();
        if (error) throw error;
      } catch (error) {
        throw handleApiError(error);
      }
    },

    getUser: async () => {
      try {
        const { data: { user }, error } = await client.auth.getUser();
        if (error) throw error;
        return user;
      } catch (error) {
        throw handleApiError(error);
      }
    },

    // Database methods
    documents: {
      select: async (query: string) => {
        try {
          const { data, error } = await client
            .from('documents')
            .select(query);
          if (error) throw error;
          return data;
        } catch (error) {
          throw handleApiError(error);
        }
      },

      insert: async (document: Database['public']['Tables']['documents']['Insert']) => {
        try {
          const { data, error } = await client
            .from('documents')
            .insert(document)
            .select();
          if (error) throw error;
          return data[0];
        } catch (error) {
          throw handleApiError(error);
        }
      },

      update: async (id: string, updates: Database['public']['Tables']['documents']['Update']) => {
        try {
          const { data, error } = await client
            .from('documents')
            .update(updates)
            .eq('id', id)
            .select();
          if (error) throw error;
          return data[0];
        } catch (error) {
          throw handleApiError(error);
        }
      },

      delete: async (id: string) => {
        try {
          const { error } = await client
            .from('documents')
            .delete()
            .eq('id', id);
          if (error) throw error;
        } catch (error) {
          throw handleApiError(error);
        }
      },
    },

    contentIdeas: {
      select: async (query: string) => {
        try {
          const { data, error } = await client
            .from('content_ideas')
            .select(query);
          if (error) throw error;
          return data;
        } catch (error) {
          throw handleApiError(error);
        }
      },

      insert: async (idea: Database['public']['Tables']['content_ideas']['Insert']) => {
        try {
          const { data, error } = await client
            .from('content_ideas')
            .insert(idea)
            .select();
          if (error) throw error;
          return data[0];
        } catch (error) {
          throw handleApiError(error);
        }
      },

      update: async (id: string, updates: Database['public']['Tables']['content_ideas']['Update']) => {
        try {
          const { data, error } = await client
            .from('content_ideas')
            .update(updates)
            .eq('id', id)
            .select();
          if (error) throw error;
          return data[0];
        } catch (error) {
          throw handleApiError(error);
        }
      },

      delete: async (id: string) => {
        try {
          const { error } = await client
            .from('content_ideas')
            .delete()
            .eq('id', id);
          if (error) throw error;
        } catch (error) {
          throw handleApiError(error);
        }
      },
    },

    userContext: {
      select: async (query: string) => {
        try {
          const { data, error } = await client
            .from('user_context')
            .select(query);
          if (error) throw error;
          return data;
        } catch (error) {
          throw handleApiError(error);
        }
      },

      insert: async (context: Database['public']['Tables']['user_context']['Insert']) => {
        try {
          const { data, error } = await client
            .from('user_context')
            .insert(context)
            .select();
          if (error) throw error;
          return data[0];
        } catch (error) {
          throw handleApiError(error);
        }
      },

      update: async (id: string, updates: Database['public']['Tables']['user_context']['Update']) => {
        try {
          const { data, error } = await client
            .from('user_context')
            .update(updates)
            .eq('id', id)
            .select();
          if (error) throw error;
          return data[0];
        } catch (error) {
          throw handleApiError(error);
        }
      },

      delete: async (id: string) => {
        try {
          const { error } = await client
            .from('user_context')
            .delete()
            .eq('id', id);
          if (error) throw error;
        } catch (error) {
          throw handleApiError(error);
        }
      },
    },

    webhookConfigurations: {
      select: async (query: string) => {
        try {
          const { data, error } = await client
            .from('webhook_configurations')
            .select(query);
          if (error) throw error;
          return data;
        } catch (error) {
          throw handleApiError(error);
        }
      },

      insert: async (config: Database['public']['Tables']['webhook_configurations']['Insert']) => {
        try {
          const { data, error } = await client
            .from('webhook_configurations')
            .insert(config)
            .select();
          if (error) throw error;
          return data[0];
        } catch (error) {
          throw handleApiError(error);
        }
      },

      update: async (id: string, updates: Database['public']['Tables']['webhook_configurations']['Update']) => {
        try {
          const { data, error } = await client
            .from('webhook_configurations')
            .update(updates)
            .eq('id', id)
            .select();
          if (error) throw error;
          return data[0];
        } catch (error) {
          throw handleApiError(error);
        }
      },

      delete: async (id: string) => {
        try {
          const { error } = await client
            .from('webhook_configurations')
            .delete()
            .eq('id', id);
          if (error) throw error;
        } catch (error) {
          throw handleApiError(error);
        }
      },
    },
  };
};

// Export a singleton instance
export const supabaseClient = createWrappedSupabaseClient();
