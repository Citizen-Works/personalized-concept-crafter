
import { corsHeaders } from "./config.ts";
import { sanitizeInput, createLogMessage, formatJsonContent } from "./utils.ts";
import { callClaudeApi } from "./claudeService.ts";

/**
 * Validates the request data and extracts necessary fields
 */
export function validateRequest(requestData: any) {
  const { prompt, contentType, idea, task } = requestData;

  if (!prompt) {
    throw new Error("Missing required field: prompt is required");
  }

  return { 
    prompt: sanitizeInput(prompt),
    contentType, 
    idea, 
    task 
  };
}

/**
 * Processes the request and generates content with Claude
 */
export async function processContentRequest(requestData: any) {
  const { prompt, contentType, idea, task } = validateRequest(requestData);
  
  // Log what type of content is being generated
  const logMessage = createLogMessage(task, contentType, idea);
  console.log(logMessage);
  
  // Choose the appropriate system prompt based on content type
  let systemPrompt = 'You are a helpful assistant that generates content based on user prompts.';
  
  if (contentType === 'structured_content_ideas') {
    systemPrompt = 'You are an expert content strategist who analyzes information and extracts valuable content ideas. Format all responses as valid, parseable JSON.';
  }
  
  // Generate content using Claude API
  const data = await callClaudeApi(systemPrompt, prompt);
  
  let generatedContent = '';
  
  // Handle different response formats
  if (data.content && typeof data.content === 'string') {
    // If content is already a string, use it directly
    generatedContent = data.content;
  } else if (data.choices && data.choices[0]?.message?.content) {
    // Handle GPT-style responses
    generatedContent = data.choices[0].message.content;
  } else if (data.content && Array.isArray(data.content) && data.content.length > 0) {
    // Handle array of content items
    const contentItem = data.content[0];
    if (typeof contentItem === 'string') {
      generatedContent = contentItem;
    } else if (typeof contentItem === 'object' && contentItem.text) {
      generatedContent = contentItem.text;
    }
  } else {
    throw new Error('No content generated by Claude');
  }
  
  // For structured content, ensure we have valid JSON
  if (contentType === 'structured_content_ideas') {
    try {
      generatedContent = formatJsonContent(generatedContent);
    } catch (jsonError) {
      console.error('Failed to parse structured content as JSON:', jsonError);
      throw new Error('Failed to parse structured content as JSON');
    }
  }
  
  return { content: generatedContent };
}

/**
 * Handles errors and returns appropriate responses
 */
export function handleError(error: Error) {
  console.error('Error in generate-with-claude function:', error);
  
  return new Response(
    JSON.stringify({ error: error.message || 'Unknown error' }),
    { 
      status: 500, 
      headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
    }
  );
}
