
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import "https://deno.land/x/xhr@0.1.0/mod.ts";

const CLAUDE_API_KEY = Deno.env.get('CLAUDE_API_KEY');
const CLAUDE_API_URL = "https://api.anthropic.com/v1/messages";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Function to sanitize input to prevent JSON parsing issues
function sanitizeInput(text: string): string {
  if (!text) return "";
  
  // Replace HTML-like content and problematic characters
  return text
    .replace(/<[^>]*>/g, "") // Remove HTML tags
    .replace(/[^\x20-\x7E\x0A\x0D\x09]/g, "") // Keep only printable ASCII, newlines, returns, and tabs
    .trim();
}

serve(async (req) => {
  console.log("Function generate-with-claude received a request");
  
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    console.log("Handling CORS preflight request");
    return new Response(null, { 
      headers: corsHeaders 
    });
  }

  try {
    if (!CLAUDE_API_KEY) {
      console.error("CLAUDE_API_KEY is not set");
      throw new Error('CLAUDE_API_KEY is not set');
    }

    // Parse request body
    let requestData;
    try {
      requestData = await req.json();
      console.log("Successfully parsed request JSON");
    } catch (parseError) {
      console.error("Failed to parse request JSON:", parseError);
      return new Response(
        JSON.stringify({ error: "Invalid JSON in request body" }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    const { prompt, contentType, idea, task } = requestData;

    if (!prompt) {
      console.error("Missing required field: prompt");
      return new Response(
        JSON.stringify({ error: "Missing required field: prompt is required" }),
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    // Sanitize the prompt to prevent JSON parsing issues
    const sanitizedPrompt = sanitizeInput(prompt);
    
    let logMessage = 'Generating content with Claude';
    
    // Log different message based on task type
    if (task === 'writing_style_preview') {
      logMessage = `Generating ${contentType || 'writing style'} preview with Claude`;
    } else if (task === 'transcript_analysis') {
      logMessage = `Analyzing transcript for content ideas: ${idea?.title || 'Untitled'}`;
    } else if (contentType && idea) {
      logMessage = `Generating ${contentType} content with Claude for idea: ${idea?.title || 'Untitled'}`;
    }
    
    console.log(logMessage);
    
    // Choose the appropriate Claude model based on content complexity
    const model = "claude-3-sonnet-20240229"; // Using Sonnet for high quality content generation
    
    console.log("Making request to Claude API");
    
    // Make request to Claude API
    const response = await fetch(CLAUDE_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': CLAUDE_API_KEY,
        'anthropic-version': '2023-06-01'
      },
      body: JSON.stringify({
        model: model,
        max_tokens: 4000,
        temperature: 0.7, // Slightly more creative but still focused
        messages: [
          {
            role: "user",
            content: sanitizedPrompt
          }
        ]
      })
    });

    // Check for successful response from Claude API
    if (!response.ok) {
      console.error(`Claude API error: ${response.status} ${response.statusText}`);
      let errorMessage = "Claude API error";
      try {
        const errorData = await response.json();
        errorMessage = errorData.error?.message || errorMessage;
        console.error('Claude API error details:', errorData);
      } catch (jsonError) {
        try {
          errorMessage = `${errorMessage}: ${response.status} ${response.statusText}`;
          console.error('Failed to parse error JSON, raw response:', await response.text());
        } catch (textError) {
          console.error('Failed to read error response text');
        }
      }
      
      return new Response(
        JSON.stringify({ error: errorMessage }),
        { 
          status: 500, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    // Parse Claude API response
    try {
      const data = await response.json();
      console.log("Successfully received and parsed Claude API response");
      
      const generatedContent = data.content && data.content[0]?.text;

      if (!generatedContent) {
        console.error('No content generated by Claude');
        throw new Error('No content generated by Claude');
      }

      console.log("Returning successful response with generated content");
      
      // Return successful response with the generated content
      return new Response(
        JSON.stringify({ content: generatedContent }),
        { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    } catch (jsonError) {
      console.error('Failed to parse Claude API response as JSON:', jsonError);
      try {
        const responseText = await response.text();
        console.error('Raw Claude API response:', responseText);
        return new Response(
          JSON.stringify({ error: 'Failed to parse Claude API response', details: responseText.substring(0, 200) }),
          { 
            status: 500, 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        );
      } catch (textError) {
        console.error('Failed to read Claude API response text:', textError);
        return new Response(
          JSON.stringify({ error: 'Failed to read Claude API response' }),
          { 
            status: 500, 
            headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
          }
        );
      }
    }
  } catch (error) {
    console.error('Unhandled error in generate-with-claude function:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'Unknown error' }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );
  }
});
